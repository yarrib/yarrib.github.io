[
  {
    "objectID": "projects/proj/index.html",
    "href": "projects/proj/index.html",
    "title": "Test Project Post",
    "section": "",
    "text": "for i in range(98):\n    if i%5 == 0:\n        print(f'the number {i} is cleanly divisible by 5')\n        \n\nthe number 0 is cleanly divisible by 5\nthe number 5 is cleanly divisible by 5\nthe number 10 is cleanly divisible by 5\nthe number 15 is cleanly divisible by 5\nthe number 20 is cleanly divisible by 5\nthe number 25 is cleanly divisible by 5\nthe number 30 is cleanly divisible by 5\nthe number 35 is cleanly divisible by 5\nthe number 40 is cleanly divisible by 5\nthe number 45 is cleanly divisible by 5\nthe number 50 is cleanly divisible by 5\nthe number 55 is cleanly divisible by 5\nthe number 60 is cleanly divisible by 5\nthe number 65 is cleanly divisible by 5\nthe number 70 is cleanly divisible by 5\nthe number 75 is cleanly divisible by 5\nthe number 80 is cleanly divisible by 5\nthe number 85 is cleanly divisible by 5\nthe number 90 is cleanly divisible by 5\nthe number 95 is cleanly divisible by 5"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Test Project Post\n\n\n\n\n\n\n\n\n\n\n\n\nDec 29, 2022\n\n\nYarri Bryn\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yarri’s Blog Site",
    "section": "",
    "text": "some stuff up here\n\n\n\n\n\n\n\nWhy would I blog?\n\n\n\n\n\n\n\nnews\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nDec 31, 2022\n\n\nYarri Bryn\n\n\n\n\n\n\nNo matching items\n\n\nsample footer text"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Yarri",
    "section": "",
    "text": "LinkedIn\n  \n  \n    \n     Github\n  \n\n  \n  \nYarri Bryn is a Data Scientist at Wipfli LLP. Yarri is married with one kiddo, Mateo, whom he hopes will grow up to be curious. He also likes golf, spending time outdoors, and various athletic and non-athletic hobbies.\n\n\nUniversity of Wisconsin - Eau Claire | Eau Claire, WI M.S. in Data Science | Sept 2019 - May 2022\nUniversity of Northern Iowa | Cedar Falls, Iowa B.A. in Marketing Management | Sept 2009 - May 2013\n\n\n\nWipfli LLP | Data Scientist / Data Engineer | January 2022-Present\nMinneapolis Park and Recreation Board | Parking & Business Systems Professional\nSelf-Employed | Professional Golfer (limited success) | September 2017 - October 2017"
  },
  {
    "objectID": "about.html#certifications",
    "href": "about.html#certifications",
    "title": "About Yarri",
    "section": "Certifications",
    "text": "Certifications"
  },
  {
    "objectID": "about.html#skills",
    "href": "about.html#skills",
    "title": "About Yarri",
    "section": "Skills",
    "text": "Skills\n\nSoft Skills\n\nCommunication\nCollaboration\nProblem Solving\n\nTechnical Skills\n\nData Engineering\nMachine Learning\nDevOps/MLOps\nInfrastructure as Code\n\nTools\n\nMicrosoft: Azure Synapse Analytics (and ADF), AzureML, SQL Server, PowerBI\nOpen Source: Git, Shell (bash/zsh), Anaconda, Docker\nOther: Terraform\n\nLanguages\n\nPython\nSQL\nSpark/PySpark"
  },
  {
    "objectID": "til.html",
    "href": "til.html",
    "title": "My TILs (Today I Learned)",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\n\n\n\n\n\n\nmatplotlib demo\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "til/demo.html",
    "href": "til/demo.html",
    "title": "matplotlib demo",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "posts/post-01-01-2023/index.html",
    "href": "posts/post-01-01-2023/index.html",
    "title": "Why would I blog?",
    "section": "",
    "text": "Why would I blog?\n\nPhoto by Ameen Fahmy on Unsplash]\nThe main reason I’m starting this blog is because I’ve been hesitant to do so. I prefer not to share too much information, so this is in a sense, a bit of a personal challenge. Also, Jeremy and Rachel over at FastAI are adament about blogging as a means of learning deep learning (or any topic for that matter).\nBut I’m going to do things a little differently, in my own style, and will probably break a bunch of blogging rules because I don’t know any nor do I care to look them up. I’m going to be mixing thoughts and ideas with data science code snippets and projects. While I have some ideas for upcoming posts I also am likely to interject random tutorials which I would consider things that are important but I didn’t find a good answer to.\nThe goal of this endeavor isn’t to make money, become influential, or anything like that. It is simply to get comfortable being uncomfortable in posting content and sharing thoughts, ideas and projects. The personal gain from this won’t come from visitors (if noone reads this, whatever!), but from committing to the habit and practicing it.\nSo with that, lets go through a random code snippet that could be helpful.\n\n\nComprehensions in Python\nLists\nFirst we need a list to work with, which is easy enough to create in python:\n\nlist_1 = list(range(25))\nprint(list_1)\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n\n\nOk, so we have a list. Lets find the odd numbers using loops:\n\nodd_nums = []\nfor item in list_1:\n    if item%2 != 0:\n        odd_nums.append(item)\nprint(odd_nums)\n\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]\n\n\nWell that works, but kind of long winded. A list comp can shorten it up for us:\n\nodd_nums_lc = [item for item in list_1 if item%2 != 0]\nprint(odd_nums_lc)\n\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]\n\n\nSo that is how list comprehensions are cool. The also works for nested lists, with Pandas DataFrames, and many other use cases.\nIt should be noted however, that comprehensions can be harder to read, so extensively nested statements might be best being split up or incorporating some sort of loop or helper function.\nDicts\nWell we need a dict, so lets take some text and do a word count. We will use the first 2 paragraphs from the Wikipedia entry for Gandalf\n\ngandalf = \"\"\"\nGandalf is a protagonist in J. R. R. Tolkien's novels The Hobbit and The Lord of the Rings. \nHe is a wizard, one of the Istari order, and the leader of the Fellowship of the Ring. Tolkien took the \nname \"Gandalf\" from the Old Norse \"Catalogue of Dwarves\" (Dvergatal) in the Völuspá.\n\nAs a wizard and the bearer of one of the Three Rings, Gandalf has great power, but works mostly by \nencouraging and persuading. He sets out as Gandalf the Grey, possessing great knowledge and \ntravelling continually. Gandalf is focused on the mission to counter the Dark Lord Sauron by \ndestroying the One Ring. He is associated with fire; his ring of power is Narya, the Ring of \nFire. As such, he delights in fireworks to entertain the hobbits of the Shire, while in great \nneed he uses fire as a weapon. As one of the Maiar, he is an immortal spirit from Valinor, \nbut his physical body can be killed.\n\"\"\"\n\ngandalf\n\n'\\nGandalf is a protagonist in J. R. R. Tolkien\\'s novels The Hobbit and The Lord of the Rings. \\nHe is a wizard, one of the Istari order, and the leader of the Fellowship of the Ring. Tolkien took the \\nname \"Gandalf\" from the Old Norse \"Catalogue of Dwarves\" (Dvergatal) in the Völuspá.\\n\\nAs a wizard and the bearer of one of the Three Rings, Gandalf has great power, but works mostly by \\nencouraging and persuading. He sets out as Gandalf the Grey, possessing great knowledge and \\ntravelling continually. Gandalf is focused on the mission to counter the Dark Lord Sauron by \\ndestroying the One Ring. He is associated with fire; his ring of power is Narya, the Ring of \\nFire. As such, he delights in fireworks to entertain the hobbits of the Shire, while in great \\nneed he uses fire as a weapon. As one of the Maiar, he is an immortal spirit from Valinor, \\nbut his physical body can be killed.\\n'\n\n\nWell as is we have some work to do on the text to clean it up, as is often required. So lets do that. we need to strip special characters, quotes, and some other things.\nSteps: - use a regular expression (regex) to strip out punctuaton - convert everything to lower\n\nimport re\n\ngandalf_filtered = re.sub(r'[^\\w\\s]|\\n', '', gandalf).lower().split(' ')\nprint(gandalf_filtered)\n\n['gandalf', 'is', 'a', 'protagonist', 'in', 'j', 'r', 'r', 'tolkiens', 'novels', 'the', 'hobbit', 'and', 'the', 'lord', 'of', 'the', 'rings', 'he', 'is', 'a', 'wizard', 'one', 'of', 'the', 'istari', 'order', 'and', 'the', 'leader', 'of', 'the', 'fellowship', 'of', 'the', 'ring', 'tolkien', 'took', 'the', 'name', 'gandalf', 'from', 'the', 'old', 'norse', 'catalogue', 'of', 'dwarves', 'dvergatal', 'in', 'the', 'völuspáas', 'a', 'wizard', 'and', 'the', 'bearer', 'of', 'one', 'of', 'the', 'three', 'rings', 'gandalf', 'has', 'great', 'power', 'but', 'works', 'mostly', 'by', 'encouraging', 'and', 'persuading', 'he', 'sets', 'out', 'as', 'gandalf', 'the', 'grey', 'possessing', 'great', 'knowledge', 'and', 'travelling', 'continually', 'gandalf', 'is', 'focused', 'on', 'the', 'mission', 'to', 'counter', 'the', 'dark', 'lord', 'sauron', 'by', 'destroying', 'the', 'one', 'ring', 'he', 'is', 'associated', 'with', 'fire', 'his', 'ring', 'of', 'power', 'is', 'narya', 'the', 'ring', 'of', 'fire', 'as', 'such', 'he', 'delights', 'in', 'fireworks', 'to', 'entertain', 'the', 'hobbits', 'of', 'the', 'shire', 'while', 'in', 'great', 'need', 'he', 'uses', 'fire', 'as', 'a', 'weapon', 'as', 'one', 'of', 'the', 'maiar', 'he', 'is', 'an', 'immortal', 'spirit', 'from', 'valinor', 'but', 'his', 'physical', 'body', 'can', 'be', 'killed']\n\n\nOk, so we have this list of words. Now what? Well to get the word counts we have a few options: - Cheat and use collections.Counter - Use a for loop\nIn either case we can get our word counts into a dict, but using a dictionary comprehension isn’t super efficient because we need to do some information retrieval from the dict. An alternative is using collections.defaultdict.\n\n# method 1: collections.Counter\nfrom collections import Counter\n\ngandalf_wc_v1 = Counter(gandalf_filtered)\nprint(gandalf_wc_v1)\n\nCounter({'the': 20, 'of': 11, 'is': 6, 'he': 6, 'gandalf': 5, 'and': 5, 'a': 4, 'in': 4, 'one': 4, 'ring': 4, 'as': 4, 'great': 3, 'fire': 3, 'r': 2, 'lord': 2, 'rings': 2, 'wizard': 2, 'from': 2, 'power': 2, 'but': 2, 'by': 2, 'to': 2, 'his': 2, 'protagonist': 1, 'j': 1, 'tolkiens': 1, 'novels': 1, 'hobbit': 1, 'istari': 1, 'order': 1, 'leader': 1, 'fellowship': 1, 'tolkien': 1, 'took': 1, 'name': 1, 'old': 1, 'norse': 1, 'catalogue': 1, 'dwarves': 1, 'dvergatal': 1, 'völuspáas': 1, 'bearer': 1, 'three': 1, 'has': 1, 'works': 1, 'mostly': 1, 'encouraging': 1, 'persuading': 1, 'sets': 1, 'out': 1, 'grey': 1, 'possessing': 1, 'knowledge': 1, 'travelling': 1, 'continually': 1, 'focused': 1, 'on': 1, 'mission': 1, 'counter': 1, 'dark': 1, 'sauron': 1, 'destroying': 1, 'associated': 1, 'with': 1, 'narya': 1, 'such': 1, 'delights': 1, 'fireworks': 1, 'entertain': 1, 'hobbits': 1, 'shire': 1, 'while': 1, 'need': 1, 'uses': 1, 'weapon': 1, 'maiar': 1, 'an': 1, 'immortal': 1, 'spirit': 1, 'valinor': 1, 'physical': 1, 'body': 1, 'can': 1, 'be': 1, 'killed': 1})\n\n\n\n# method 2: for loop\n\ngandalf_wc_v2 = {}\n# Count number of times each word comes up in list of words (in dictionary)\nfor w in gandalf_filtered:\n    if w not in gandalf_wc_v2.keys():\n        gandalf_wc_v2[w] = 1\n    else:\n        gandalf_wc_v2[w] += 1\n\nprint(gandalf_wc_v2)\n\n{'gandalf': 5, 'is': 6, 'a': 4, 'protagonist': 1, 'in': 4, 'j': 1, 'r': 2, 'tolkiens': 1, 'novels': 1, 'the': 20, 'hobbit': 1, 'and': 5, 'lord': 2, 'of': 11, 'rings': 2, 'he': 6, 'wizard': 2, 'one': 4, 'istari': 1, 'order': 1, 'leader': 1, 'fellowship': 1, 'ring': 4, 'tolkien': 1, 'took': 1, 'name': 1, 'from': 2, 'old': 1, 'norse': 1, 'catalogue': 1, 'dwarves': 1, 'dvergatal': 1, 'völuspáas': 1, 'bearer': 1, 'three': 1, 'has': 1, 'great': 3, 'power': 2, 'but': 2, 'works': 1, 'mostly': 1, 'by': 2, 'encouraging': 1, 'persuading': 1, 'sets': 1, 'out': 1, 'as': 4, 'grey': 1, 'possessing': 1, 'knowledge': 1, 'travelling': 1, 'continually': 1, 'focused': 1, 'on': 1, 'mission': 1, 'to': 2, 'counter': 1, 'dark': 1, 'sauron': 1, 'destroying': 1, 'associated': 1, 'with': 1, 'fire': 3, 'his': 2, 'narya': 1, 'such': 1, 'delights': 1, 'fireworks': 1, 'entertain': 1, 'hobbits': 1, 'shire': 1, 'while': 1, 'need': 1, 'uses': 1, 'weapon': 1, 'maiar': 1, 'an': 1, 'immortal': 1, 'spirit': 1, 'valinor': 1, 'physical': 1, 'body': 1, 'can': 1, 'be': 1, 'killed': 1}\n\n\nBecause it doesn’t matter much which one we use for our example, we’ll just grab gandalf_wc_v2 and get the top N values that exceed a certain word length. There are a ton of ways to do this, we will just use plain python.\n\nNote, we could have done this in one more line on our collections.Counter method call like this: gandalf_wc_v1.most_common(n=5)\n\nBut that is too easy, so let’s do it longhand:\n\n# key value pairs where key is >= 3\ngandalf_wl_geq_3 = {k:v for k,v in gandalf_wc_v2.items() if len(k) >= 3}\n# top N counts\nn = 5\ntop_n = sorted(gandalf_wl_geq_3.values(), reverse=True)[:n]\n#[20, 5, 5, 4, 4]\n\n# finally, a fun use of a dict comp:\n{k:v for k,v in gandalf_wl_geq_3.items() if v in top_n}\n\n{'gandalf': 5, 'the': 20, 'and': 5, 'one': 4, 'ring': 4}\n\n\n\nWell for now that is plenty of information. As stated previously I’m striving to be conscise and useful, and not just for those with an established vocabulary in data science or programming in general. Thanks for reading!"
  }
]